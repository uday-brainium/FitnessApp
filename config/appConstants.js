
let ls = require('react-native-local-storage');

export class NetworkConstants {
  static RequestUrl = (requestActionName) =>{
  BaseUrl='http://nodeserver.brainiuminfotech.com:4242/api/';
    return(BaseUrl+requestActionName);
  } ;
  
  static RequestConfig =(data) => {
  return({
    method: "POST",
    headers: {
    "Accept": "application/json",
    "Content-Type": "application/json"
    },
  body: JSON.stringify(data)
  });
};
  
}

// export const tokensPerMeter = 0.2
export const tokenRateWalking = 0.01
export const tokenRateBike = 0.001
export const tokenRateVehicle = 0.0001
export const calorieRate = 0.01 // X distance
export const base_url = "http://nodeserver.brainiuminfotech.com:4242/"


//Notification
export const defaultConfigNotification = {
        /* Android Only Properties */
        id: '1', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "Activity tracker running..", // (optional)
        autoCancel: false, // (optional) default: true
        largeIcon: "app_icon", // (optional) default: "ic_launcher"
        smallIcon: "app_icon", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "FitnessApp activity tracker is tracking your activity", // (optional) default: "message" prop
        //subText: "This is a subText", // (optional) default: none
        color: "green", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 100, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: true, // (optional) set whether this is an "ongoing" notification
        priority: "max", // (optional) set notification priority, default: high
        visibility: "private", // (optional) set notification visibility, default: private
        importance: "max", // (optional) set notification importance, default: high
    
        // /* iOS only properties */
        // alertAction: // (optional) default: view
        // category: // (optional) default: null
        // userInfo: // (optional) default: null (object containing additional notification data)
    
        /* iOS and Android properties */
        title: "Activity tracker running..", // (optional)
        message: "FitnessApp activity tracker is tracking your activity", // (required)
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    }


  export const distanceInMeters = (lat1, lon1, lat2, lon2) => {
    var a = 6378137,
     b = 6356752.3142,
     f = 1 / 298.257223563, 
     L = (lon2-lon1)*Math.PI / 180,
     x = Math.atan(1 - f),
     U1 = x * Math.tan(lat1*Math.PI / 180),
     U2 = x * Math.tan(lat2*Math.PI / 180),
     sinU1 = Math.sin(U1),
     cosU1 = Math.cos(U1),
     sinU2 = Math.sin(U2),
     cosU2 = Math.cos(U2),
     lambda = L,
     lambdaP,
     iterLimit = 100;
    do {
      var sinLambda = Math.sin(lambda),
          cosLambda = Math.cos(lambda),
          sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda))
      if (0 === sinSigma) {
      return 0; // co-incident points
      };
      var cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda,
          sigma = Math.atan2(sinSigma, cosSigma),
          sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma,
          cosSqAlpha = 1 - sinAlpha * sinAlpha,
          cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha,
          C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
      if (isNaN(cos2SigmaM)) {
      cos2SigmaM = 0; // equatorial line: cosSqAlpha = 0 (ยง6)
      };
      lambdaP = lambda;
      lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
    } while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0);

    if (0 === iterLimit) {
      return NaN; // formula failed to converge
    };

    var uSq = cosSqAlpha * (a * a - b * b) / (b * b),
        A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq))),
        B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq))),
        deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM))),
        s = b * A * (sigma - deltaSigma);
    return s.toFixed(3); // round to 1mm precision
  }

  export const calorieBurnt = (activityType, activityTime, weight) => {
    let MET = 0

       if(activityType == 'walkrun') {
         //Walking MET
          MET = 3.5
       } else if(activityType == 'bycycle'){
          //bycycle MET
          MET = 6.0
       } else if(activityType == 'vehicle') {
          //Vehicle MET
          MET = 1.3
       }

       let totalMinute = (activityTime / 60)

       //Calorie generated per minute // 
       let formula = (.0175 * MET * weight)
       let totalCalorie = (formula * totalMinute)

       return totalCalorie

  }

// export class UIConstants {
//   static AppbarHeight = Platform.OS === 'ios' ? 44 : 56;
//   static StatusbarHeight = Platform.OS === 'ios' ? 20 : 0;
//   static HeaderHeight = UIConstants.AppbarHeight + UIConstants.StatusbarHeight;
// }
// var HTTP_STATUS_CODES = {
//   'CODE_200' : 'OK',
//   'CODE_201' : 'Created',
//   'CODE_202' : 'Accepted',
//   'CODE_203' : 'Non-Authoritative Information',
//   'CODE_204' : 'No Content',
//   'CODE_205' : 'Reset Content',
//   'CODE_206' : 'Partial Content',
//   'CODE_300' : 'Multiple Choices',
//   'CODE_301' : 'Moved Permanently',
//   'CODE_302' : 'Found',
//   'CODE_303' : 'See Other',
//   'CODE_304' : 'Not Modified',
//   'CODE_305' : 'Use Proxy',
//   'CODE_307' : 'Temporary Redirect',
//   'CODE_400' : 'Bad Request',
//   'CODE_401' : 'Unauthorized',
//   'CODE_402' : 'Payment Required',
//   'CODE_403' : 'Forbidden',
//   'CODE_404' : 'Not Found',
//   'CODE_405' : 'Method Not Allowed',
//   'CODE_406' : 'Not Acceptable',
//   'CODE_407' : 'Proxy Authentication Required',
//   'CODE_408' : 'Request Timeout',
//   'CODE_409' : 'Conflict',
//   'CODE_410' : 'Gone',
//   'CODE_411' : 'Length Required',
//   'CODE_412' : 'Precondition Failed',
//   'CODE_413' : 'Request Entity Too Large',
//   'CODE_414' : 'Request-URI Too Long',
//   'CODE_415' : 'Unsupported Media Type',
//   'CODE_416' : 'Requested Range Not Satisfiable',
//   'CODE_417' : 'Expectation Failed',
//   'CODE_500' : 'Internal Server Error',
//   'CODE_501' : 'Not Implemented',
//   'CODE_502' : 'Bad Gateway',
//   'CODE_503' : 'Service Unavailable',
//   'CODE_504' : 'Gateway Timeout',
//   'CODE_505' : 'HTTP Version Not Supported'
// };


{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"../Matrix2D","data":{"isAsync":false}},{"name":"pegjs","data":{"isAsync":false}},{"name":"lodash","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function(g,r,i,a,m,e,d){var n=r(d[0]);Object.defineProperty(e,\"__esModule\",{value:!0}),e.props2transform=b,e.default=function(n){return c(b(n),n.transform?b(n.transform):null)};var t=n(r(d[1])),s=n(r(d[2])),o=n(r(d[3])),l=n(r(d[4])),u=new s.default;function c(n,t){return u.reset(),f(n),t&&f(t),u.toArray()}var p=o.default.generate(\"\\n{\\n    var deg2rad = Math.PI / 180;\\n\\n    /*\\n     \\u2554\\u2550        \\u2550\\u2557   \\u2554\\u2550        \\u2550\\u2557   \\u2554\\u2550     \\u2550\\u2557\\n     \\u2551 al cl el \\u2551   \\u2551 ar cr er \\u2551   \\u2551 a c e \\u2551\\n     \\u2551 bl dl fl \\u2551 * \\u2551 br dr fr \\u2551 = \\u2551 b d f \\u2551\\n     \\u2551 0  0  1  \\u2551   \\u2551 0  0  1  \\u2551   \\u2551 0 0 1 \\u2551\\n     \\u255a\\u2550        \\u2550\\u255d   \\u255a\\u2550        \\u2550\\u255d   \\u255a\\u2550     \\u2550\\u255d\\n    */\\n    function multiply_matrices(l, r) {\\n        var [al, cl, el, bl, dl, fl] = l;\\n        var [ar, cr, er, br, dr, fr] = r;\\n\\n        var a = al * ar + cl * br;\\n        var c = al * cr + cl * dr;\\n        var e = al * er + cl * fr + el;\\n        var b = bl * ar + dl * br;\\n        var d = bl * cr + dl * dr;\\n        var f = bl * er + dl * fr + fl;\\n\\n        return [a, c, e, b, d, f];\\n    }\\n}\\n\\ntransformList\\n    = wsp* ts:transforms? wsp* { return ts; }\\n\\ntransforms\\n    = t:transform commaWsp* ts:transforms\\n    {\\n        return multiply_matrices(t, ts);\\n    }\\n    / t:transform\\n\\ntransform\\n    = matrix\\n    / translate\\n    / scale\\n    / rotate\\n    / skewX\\n    / skewY\\n\\nmatrix\\n    = \\\"matrix\\\" wsp* \\\"(\\\" wsp*\\n        a:number commaWsp\\n        b:number commaWsp\\n        c:number commaWsp\\n        d:number commaWsp\\n        e:number commaWsp\\n        f:number wsp* \\\")\\\"\\n    {\\n        return [\\n            a, c, e,\\n            b, d, f\\n        ];\\n    }\\n\\ntranslate\\n    = \\\"translate\\\" wsp* \\\"(\\\" wsp* tx:number ty:commaWspNumber? wsp* \\\")\\\"\\n    {\\n        return [\\n            1, 0, tx,\\n            0, 1, ty || 0\\n        ];\\n    }\\n\\nscale\\n    = \\\"scale\\\" wsp* \\\"(\\\" wsp* sx:number sy:commaWspNumber? wsp* \\\")\\\"\\n    {\\n        return [\\n            sx, 0,                     0,\\n            0,  sy === null ? sx : sy, 0\\n        ];\\n    }\\n\\nrotate\\n    = \\\"rotate\\\" wsp* \\\"(\\\" wsp* angle:number c:commaWspTwoNumbers? wsp* \\\")\\\"\\n    {\\n        var cos = Math.cos(deg2rad * angle);\\n        var sin = Math.sin(deg2rad * angle);\\n        if (c !== null) {\\n            var [x, y] = c;\\n            return [\\n                cos, -sin, cos * -x + -sin * -y + x,\\n                sin,  cos, sin * -x +  cos * -y + y\\n            ];\\n        }\\n        return [\\n            cos, -sin, 0,\\n            sin,  cos, 0\\n        ];\\n    }\\n\\nskewX\\n    = \\\"skewX\\\" wsp* \\\"(\\\" wsp* angle:number wsp* \\\")\\\"\\n    {\\n        return [\\n            1, Math.tan(deg2rad * angle), 0,\\n            0, 1,                         0\\n        ];\\n    }\\n\\nskewY\\n    = \\\"skewY\\\" wsp* \\\"(\\\" wsp* angle:number wsp* \\\")\\\"\\n    {\\n        return [\\n            1,                         0, 0,\\n            Math.tan(deg2rad * angle), 1, 0\\n        ];\\n    }\\n\\nnumber\\n    = f:(sign? floatingPointConstant) { return parseFloat(f.join(\\\"\\\")); }\\n    / i:(sign? integerConstant) { return parseInt(i.join(\\\"\\\")); }\\n\\ncommaWspNumber\\n    = commaWsp n:number { return n; }\\n\\ncommaWspTwoNumbers\\n    = commaWsp n1:number commaWsp n2:number { return [n1, n2]; }\\n\\ncommaWsp\\n    = (wsp+ comma? wsp*) / (comma wsp*)\\n\\ncomma\\n    = \\\",\\\"\\n\\nintegerConstant\\n    = ds:digitSequence { return ds.join(\\\"\\\"); }\\n\\nfloatingPointConstant\\n    = f:(fractionalConstant exponent?) { return f.join(\\\"\\\"); }\\n    / d:(digitSequence exponent) { return d.join(\\\"\\\"); }\\n\\nfractionalConstant \\\"fractionalConstant\\\"\\n    = d1:digitSequence? \\\".\\\" d2:digitSequence { return [d1 ? d1.join(\\\"\\\") : null, \\\".\\\", d2.join(\\\"\\\")].join(\\\"\\\"); }\\n    / d:digitSequence \\\".\\\" { return d.join(\\\"\\\"); }\\n\\nexponent\\n    =  e:([eE] sign? digitSequence) { return [e[0], e[1], e[2].join(\\\"\\\")].join(\\\"\\\"); }\\n\\nsign\\n    = [+-]\\n\\ndigitSequence\\n    = digit+\\n\\ndigit\\n    = [0-9]\\n\\nwsp\\n    = [\\\\u0020\\\\u0009\\\\u000D\\\\u000A]\\n\");function f(n){if(n)if(\"string\"==typeof n)try{var s=p.parse(n),o=(0,t.default)(s,6),l=o[0],c=o[1],f=o[2],w=o[3],b=o[4],y=o[5];u.append.apply(u,[l,w,c,b,f,y])}catch(n){console.error(n)}else u.appendTransform(n.x+n.originX,n.y+n.originY,n.scaleX,n.scaleY,n.rotation,n.skewX,n.skewY,n.originX,n.originY)}function w(n,t,s,o){var u,c,p=[];return l.default.isString(n)?2===(p=n.split(/\\s*,\\s*/)).length?(u=+p[0],c=+p[1]):1===p.length&&(u=c=+p[0]):l.default.isNumber(n)&&(u=c=n),t=+t,isNaN(t)||(u=t),s=+s,isNaN(s)||(c=s),[u||o||0,c||o||0]}function b(n){if(n&&\"string\"==typeof n)return n;var s=w(n.origin,n.originX,n.originY),o=(0,t.default)(s,2),u=o[0],c=o[1],p=w(n.scale,n.scaleX,n.scaleY,1),f=(0,t.default)(p,2),b=f[0],y=f[1],v=w(n.skew,n.skewX,n.skewY),x=(0,t.default)(v,2),W=x[0],X=x[1],Y=w(n.translate,l.default.isNil(n.translateX)?n.x||0:n.translateX,l.default.isNil(n.translateY)?n.y||0:n.translateY),k=(0,t.default)(Y,2),j=k[0],N=k[1];return{rotation:+n.rotation||0,scaleX:b,scaleY:y,originX:u,originY:c,skewX:W,skewY:X,x:j,y:N}}});","map":[[1,121,263,15],[1,130,263,24,"props"],[1,133,264,4],[1,140,264,11,"transformToMatrix"],[1,142,265,8,"props2transform"],[1,144,265,24,"props"],[1,147,266,8,"props"],[1,149,266,14,"transform"],[1,159,266,26,"props2transform"],[1,161,266,42,"props"],[1,163,266,48,"transform"],[1,174,266,61],[1,198,1,0,"_Matrix2D"],[1,200,1,0,"_interopRequireDefault"],[1,202,1,0,"r"],[1,204,1,0,"d"],[1,206,1,0],[1,211,2,0,"_pegjs"],[1,213,2,0,"_interopRequireDefault"],[1,215,2,0,"r"],[1,217,2,0,"d"],[1,219,2,0],[1,224,3,0,"_lodash"],[1,226,3,0,"_interopRequireDefault"],[1,228,3,0,"r"],[1,230,3,0,"d"],[1,232,3,0],[1,237,5,6,"pooledMatrix"],[1,239,5,21],[1,243,5,25,"Matrix2D"],[1,245,5,25,"Matrix2D"],[1,253,7,0],[1,262,7,9,"transformToMatrix"],[1,264,7,27,"props"],[1,266,7,34,"transform"],[1,269,15,4],[1,276,8,4,"pooledMatrix"],[1,278,8,17,"reset"],[1,286,9,4,"appendTransform"],[1,288,9,20,"props"],[1,291,11,8,"transform"],[1,294,12,8,"appendTransform"],[1,296,12,24,"transform"],[1,299,15,11,"pooledMatrix"],[1,301,15,24,"toArray"],[1,311,18,0],[1,315,18,6,"transformParser"],[1,317,18,24,"peg"],[1,319,18,24,"peg"],[1,327,18,28,"generate"],[1,336,18,24],[1,4147,174,0],[1,4156,174,9,"appendTransform"],[1,4158,174,25,"transform"],[1,4161,175,4],[1,4164,175,8,"transform"],[1,4166,176,8],[1,4169,176,33],[1,4186,176,19,"transform"],[1,4188,177,12],[1,4192,177,16],[1,4196,177,16,"_transformParser$pars"],[1,4198,178,43,"transformParser"],[1,4200,178,59,"parse"],[1,4206,178,65,"transform"],[1,4209,177,16,"_transformParser$pars2"],[1,4212,177,16],[1,4214,177,16,"_slicedToArray2"],[1,4216,177,16,"default"],[1,4225,177,16,"_transformParser$pars"],[1,4227,177,16],[1,4230,178,23,"a"],[1,4232,177,16,"_transformParser$pars2"],[1,4234,177,16],[1,4237,178,26,"c"],[1,4239,177,16,"_transformParser$pars2"],[1,4241,177,16],[1,4244,178,29,"e"],[1,4246,177,16,"_transformParser$pars2"],[1,4248,177,16],[1,4251,178,32,"b"],[1,4253,177,16,"_transformParser$pars2"],[1,4255,177,16],[1,4258,178,35,"d"],[1,4260,177,16,"_transformParser$pars2"],[1,4262,177,16],[1,4265,178,38,"f"],[1,4267,177,16,"_transformParser$pars2"],[1,4269,177,16],[1,4272,179,16,"pooledMatrix"],[1,4274,179,29,"append"],[1,4281,179,16,"apply"],[1,4287,179,16,"pooledMatrix"],[1,4290,179,40,"a"],[1,4292,179,43,"b"],[1,4294,179,46,"c"],[1,4296,179,49,"d"],[1,4298,179,52,"e"],[1,4300,179,55,"f"],[1,4304,180,14],[1,4310,180,21,"e"],[1,4313,181,16,"console"],[1,4321,181,24,"error"],[1,4327,181,30,"e"],[1,4335,184,12,"pooledMatrix"],[1,4337,184,25,"appendTransform"],[1,4353,185,16,"transform"],[1,4355,185,26,"x"],[1,4357,185,30,"transform"],[1,4359,185,40,"originX"],[1,4367,186,16,"transform"],[1,4369,186,26,"y"],[1,4371,186,30,"transform"],[1,4373,186,40,"originY"],[1,4381,187,16,"transform"],[1,4383,187,26,"scaleX"],[1,4390,188,16,"transform"],[1,4392,188,26,"scaleY"],[1,4399,189,16,"transform"],[1,4401,189,26,"rotation"],[1,4410,190,16,"transform"],[1,4412,190,26,"skewX"],[1,4418,191,16,"transform"],[1,4420,191,26,"skewY"],[1,4426,192,16,"transform"],[1,4428,192,26,"originX"],[1,4436,193,16,"transform"],[1,4438,193,26,"originY"],[1,4447,199,0],[1,4456,199,9,"universal2axis"],[1,4458,199,24,"universal"],[1,4460,199,35,"axisX"],[1,4462,199,42,"axisY"],[1,4464,199,49,"defaultValue"],[1,4467,200,4],[1,4471,201,8,"x"],[1,4473,202,8,"y"],[1,4475,200,8,"coords"],[1,4480,225,4],[1,4487,203,8,"_"],[1,4489,203,8,"_"],[1,4497,203,10,"isString"],[1,4506,203,19,"universal"],[1,4509,205,30],[1,4514,204,8,"coords"],[1,4516,204,17,"universal"],[1,4518,204,27,"split"],[1,4524,204,33],[1,4536,205,19,"length"],[1,4544,206,12,"x"],[1,4547,206,17,"coords"],[1,4549,206,24],[1,4552,207,12,"y"],[1,4555,207,17,"coords"],[1,4557,207,24],[1,4561,208,37],[1,4565,208,19,"coords"],[1,4567,208,26,"length"],[1,4576,209,12,"x"],[1,4578,209,16,"y"],[1,4581,209,21,"coords"],[1,4583,209,28],[1,4587,211,15,"_"],[1,4589,211,15,"_"],[1,4597,211,17,"isNumber"],[1,4606,211,26,"universal"],[1,4611,212,8,"x"],[1,4613,212,12,"y"],[1,4615,212,16,"universal"],[1,4618,215,4,"axisX"],[1,4621,215,13,"axisX"],[1,4623,216,9,"isNaN"],[1,4629,216,15,"axisX"],[1,4634,217,8,"x"],[1,4636,217,12,"axisX"],[1,4639,220,4,"axisY"],[1,4642,220,13,"axisY"],[1,4644,221,9,"isNaN"],[1,4650,221,15,"axisY"],[1,4655,222,8,"y"],[1,4657,222,12,"axisY"],[1,4661,225,12,"x"],[1,4664,225,17,"defaultValue"],[1,4667,225,33],[1,4669,225,36,"y"],[1,4672,225,41,"defaultValue"],[1,4675,225,57],[1,4678,228,7],[1,4687,228,16,"props2transform"],[1,4689,228,32,"props"],[1,4692,229,4],[1,4695,229,8,"props"],[1,4698,229,34],[1,4715,229,24,"props"],[1,4717,230,8],[1,4724,230,15,"props"],[1,4726,228,39],[1,4730,228,39,"_universal2axis"],[1,4732,232,31,"universal2axis"],[1,4734,233,8,"props"],[1,4736,233,14,"origin"],[1,4743,234,8,"props"],[1,4745,234,14,"originX"],[1,4753,235,8,"props"],[1,4755,235,14,"originY"],[1,4764,228,39,"_universal2axis2"],[1,4767,228,39],[1,4769,228,39,"_slicedToArray2"],[1,4771,228,39,"default"],[1,4780,228,39,"_universal2axis"],[1,4782,228,39],[1,4785,232,11,"originX"],[1,4787,228,39,"_universal2axis2"],[1,4789,228,39],[1,4792,232,20,"originY"],[1,4794,228,39,"_universal2axis2"],[1,4796,228,39],[1,4799,228,39,"_universal2axis3"],[1,4801,237,29,"universal2axis"],[1,4803,238,8,"props"],[1,4805,238,14,"scale"],[1,4811,239,8,"props"],[1,4813,239,14,"scaleX"],[1,4820,240,8,"props"],[1,4822,240,14,"scaleY"],[1,4829,241,8],[1,4832,228,39,"_universal2axis4"],[1,4835,228,39],[1,4837,228,39,"_slicedToArray2"],[1,4839,228,39,"default"],[1,4848,228,39,"_universal2axis3"],[1,4850,228,39],[1,4853,237,11,"scaleX"],[1,4855,228,39,"_universal2axis4"],[1,4857,228,39],[1,4860,237,19,"scaleY"],[1,4862,228,39,"_universal2axis4"],[1,4864,228,39],[1,4867,228,39,"_universal2axis5"],[1,4869,243,27,"universal2axis"],[1,4871,243,42,"props"],[1,4873,243,48,"skew"],[1,4878,243,54,"props"],[1,4880,243,60,"skewX"],[1,4886,243,67,"props"],[1,4888,243,73,"skewY"],[1,4895,228,39,"_universal2axis6"],[1,4898,228,39],[1,4900,228,39,"_slicedToArray2"],[1,4902,228,39,"default"],[1,4911,228,39,"_universal2axis5"],[1,4913,228,39],[1,4916,243,11,"skewX"],[1,4918,228,39,"_universal2axis6"],[1,4920,228,39],[1,4923,243,18,"skewY"],[1,4925,228,39,"_universal2axis6"],[1,4927,228,39],[1,4930,228,39,"_universal2axis7"],[1,4932,244,37,"universal2axis"],[1,4934,245,8,"props"],[1,4936,245,14,"translate"],[1,4946,246,8,"_"],[1,4948,246,8,"_"],[1,4956,246,10,"isNil"],[1,4962,246,16,"props"],[1,4964,246,22,"translateX"],[1,4976,246,36,"props"],[1,4978,246,42,"x"],[1,4981,246,47],[1,4983,246,51,"props"],[1,4985,246,57,"translateX"],[1,4996,247,8,"_"],[1,4998,247,8,"_"],[1,5006,247,10,"isNil"],[1,5012,247,16,"props"],[1,5014,247,22,"translateY"],[1,5026,247,36,"props"],[1,5028,247,42,"y"],[1,5031,247,47],[1,5033,247,51,"props"],[1,5035,247,57,"translateY"],[1,5047,228,39,"_universal2axis8"],[1,5050,228,39],[1,5052,228,39,"_slicedToArray2"],[1,5054,228,39,"default"],[1,5063,228,39,"_universal2axis7"],[1,5065,228,39],[1,5068,244,11,"translateX"],[1,5070,228,39,"_universal2axis8"],[1,5072,228,39],[1,5075,244,23,"translateY"],[1,5077,228,39,"_universal2axis8"],[1,5079,228,39],[1,5082,250,4],[1,5089,251,8,"rotation"],[1,5099,251,19,"props"],[1,5101,251,25,"rotation"],[1,5111,251,37],[1,5113,252,8,"scaleX"],[1,5120,252,16,"scaleX"],[1,5122,253,8,"scaleY"],[1,5129,253,16,"scaleY"],[1,5131,254,8,"originX"],[1,5139,254,17,"originX"],[1,5141,255,8,"originY"],[1,5149,255,17,"originY"],[1,5151,256,8,"skewX"],[1,5157,256,15,"skewX"],[1,5159,257,8,"skewY"],[1,5165,257,15,"skewY"],[1,5167,258,8,"x"],[1,5169,258,11,"translateX"],[1,5171,259,8,"y"],[1,5173,259,11,"translateY"]]},"type":"js/module"}]}
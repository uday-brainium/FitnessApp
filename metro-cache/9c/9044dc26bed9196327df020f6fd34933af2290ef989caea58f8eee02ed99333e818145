{"dependencies":[{"name":"./util/assertString","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = isIP;\n\n  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"./util/assertString\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\n  var ipv6Block = /^[0-9A-F]{1,4}$/i;\n\n  function isIP(str) {\n    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (0, _assertString.default)(str);\n    version = String(version);\n\n    if (!version) {\n      return isIP(str, 4) || isIP(str, 6);\n    } else if (version === '4') {\n      if (!ipv4Maybe.test(str)) {\n        return false;\n      }\n\n      var parts = str.split('.').sort(function (a, b) {\n        return a - b;\n      });\n      return parts[3] <= 255;\n    } else if (version === '6') {\n      var blocks = str.split(':');\n      var foundOmissionBlock = false;\n      var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n      var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n      if (blocks.length > expectedNumberOfBlocks) {\n        return false;\n      }\n\n      if (str === '::') {\n        return true;\n      } else if (str.substr(0, 2) === '::') {\n        blocks.shift();\n        blocks.shift();\n        foundOmissionBlock = true;\n      } else if (str.substr(str.length - 2) === '::') {\n        blocks.pop();\n        blocks.pop();\n        foundOmissionBlock = true;\n      }\n\n      for (var i = 0; i < blocks.length; ++i) {\n        if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n          if (foundOmissionBlock) {\n            return false;\n          }\n\n          foundOmissionBlock = true;\n        } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {} else if (!ipv6Block.test(blocks[i])) {\n          return false;\n        }\n      }\n\n      if (foundOmissionBlock) {\n        return blocks.length >= 1;\n      }\n\n      return blocks.length === expectedNumberOfBlocks;\n    }\n\n    return false;\n  }\n\n  module.exports = exports.default;\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"isIP"],[7,24,6,0],[9,0,8,0],[9,6,8,4,"_assertString"],[9,19,8,17],[9,22,8,20,"_interopRequireDefault"],[9,44,8,42],[9,45,8,43,"require"],[9,56,8,50],[9,98,8,42],[9,99,8,0],[11,0,10,0],[11,11,10,9,"_interopRequireDefault"],[11,33,10,0],[11,34,10,32,"obj"],[11,37,10,0],[11,39,10,37],[12,0,10,39],[12,11,10,46,"obj"],[12,14,10,49],[12,18,10,53,"obj"],[12,21,10,56],[12,22,10,57,"__esModule"],[12,32,10,46],[12,35,10,70,"obj"],[12,38,10,46],[12,41,10,76],[13,0,10,78,"default"],[13,6,10,78,"default"],[13,13,10,85],[13,15,10,87,"obj"],[14,0,10,76],[14,5,10,39],[15,0,10,95],[17,0,12,0],[17,6,12,4,"ipv4Maybe"],[17,15,12,13],[17,18,12,16],[17,64,12,0],[18,0,13,0],[18,6,13,4,"ipv6Block"],[18,15,13,13],[18,18,13,16],[18,36,13,0],[20,0,15,0],[20,11,15,9,"isIP"],[20,15,15,0],[20,16,15,14,"str"],[20,19,15,0],[20,21,15,19],[21,0,16,2],[21,8,16,6,"version"],[21,15,16,13],[21,18,16,16,"arguments"],[21,27,16,25],[21,28,16,26,"length"],[21,34,16,16],[21,37,16,35],[21,38,16,16],[21,42,16,40,"arguments"],[21,51,16,49],[21,52,16,50],[21,53,16,49],[21,54,16,40],[21,59,16,57,"undefined"],[21,68,16,16],[21,71,16,69,"arguments"],[21,80,16,78],[21,81,16,79],[21,82,16,78],[21,83,16,16],[21,86,16,84],[21,88,16,2],[22,0,17,2],[22,5,17,3],[22,8,17,6,"_assertString"],[22,21,17,19],[22,22,17,20,"default"],[22,29,17,2],[22,31,17,29,"str"],[22,34,17,2],[23,0,18,2,"version"],[23,4,18,2,"version"],[23,11,18,9],[23,14,18,12,"String"],[23,20,18,18],[23,21,18,19,"version"],[23,28,18,18],[23,29,18,2],[25,0,20,2],[25,8,20,6],[25,9,20,7,"version"],[25,16,20,2],[25,18,20,16],[26,0,21,4],[26,13,21,11,"isIP"],[26,17,21,15],[26,18,21,16,"str"],[26,21,21,15],[26,23,21,21],[26,24,21,15],[26,25,21,11],[26,29,21,27,"isIP"],[26,33,21,31],[26,34,21,32,"str"],[26,37,21,31],[26,39,21,37],[26,40,21,31],[26,41,21,4],[27,0,22,3],[27,5,20,2],[27,11,22,9],[27,15,22,13,"version"],[27,22,22,20],[27,27,22,25],[27,30,22,9],[27,32,22,30],[28,0,23,4],[28,10,23,8],[28,11,23,9,"ipv4Maybe"],[28,20,23,18],[28,21,23,19,"test"],[28,25,23,9],[28,26,23,24,"str"],[28,29,23,9],[28,30,23,4],[28,32,23,30],[29,0,24,6],[29,15,24,13],[29,20,24,6],[30,0,25,5],[32,0,27,4],[32,10,27,8,"parts"],[32,15,27,13],[32,18,27,16,"str"],[32,21,27,19],[32,22,27,20,"split"],[32,27,27,16],[32,28,27,26],[32,31,27,16],[32,33,27,31,"sort"],[32,37,27,16],[32,38,27,36],[32,48,27,46,"a"],[32,49,27,36],[32,51,27,49,"b"],[32,52,27,36],[32,54,27,52],[33,0,28,6],[33,15,28,13,"a"],[33,16,28,14],[33,19,28,17,"b"],[33,20,28,6],[34,0,29,5],[34,7,27,16],[34,8,27,4],[35,0,30,4],[35,13,30,11,"parts"],[35,18,30,16],[35,19,30,17],[35,20,30,16],[35,21,30,11],[35,25,30,23],[35,28,30,4],[36,0,31,3],[36,5,22,9],[36,11,31,9],[36,15,31,13,"version"],[36,22,31,20],[36,27,31,25],[36,30,31,9],[36,32,31,30],[37,0,32,4],[37,10,32,8,"blocks"],[37,16,32,14],[37,19,32,17,"str"],[37,22,32,20],[37,23,32,21,"split"],[37,28,32,17],[37,29,32,27],[37,32,32,17],[37,33,32,4],[38,0,33,4],[38,10,33,8,"foundOmissionBlock"],[38,28,33,26],[38,31,33,29],[38,36,33,4],[39,0,39,4],[39,10,39,8,"foundIPv4TransitionBlock"],[39,34,39,32],[39,37,39,35,"isIP"],[39,41,39,39],[39,42,39,40,"blocks"],[39,48,39,46],[39,49,39,47,"blocks"],[39,55,39,53],[39,56,39,54,"length"],[39,62,39,47],[39,65,39,63],[39,66,39,46],[39,67,39,39],[39,69,39,67],[39,70,39,39],[39,71,39,4],[40,0,40,4],[40,10,40,8,"expectedNumberOfBlocks"],[40,32,40,30],[40,35,40,33,"foundIPv4TransitionBlock"],[40,59,40,57],[40,62,40,60],[40,63,40,57],[40,66,40,64],[40,67,40,4],[42,0,42,4],[42,10,42,8,"blocks"],[42,16,42,14],[42,17,42,15,"length"],[42,23,42,8],[42,26,42,24,"expectedNumberOfBlocks"],[42,48,42,4],[42,50,42,48],[43,0,43,6],[43,15,43,13],[43,20,43,6],[44,0,44,5],[46,0,47,4],[46,10,47,8,"str"],[46,13,47,11],[46,18,47,16],[46,22,47,4],[46,24,47,22],[47,0,48,6],[47,15,48,13],[47,19,48,6],[48,0,49,5],[48,7,47,4],[48,13,49,11],[48,17,49,15,"str"],[48,20,49,18],[48,21,49,19,"substr"],[48,27,49,15],[48,28,49,26],[48,29,49,15],[48,31,49,29],[48,32,49,15],[48,38,49,36],[48,42,49,11],[48,44,49,42],[49,0,50,6,"blocks"],[49,8,50,6,"blocks"],[49,14,50,12],[49,15,50,13,"shift"],[49,20,50,6],[50,0,51,6,"blocks"],[50,8,51,6,"blocks"],[50,14,51,12],[50,15,51,13,"shift"],[50,20,51,6],[51,0,52,6,"foundOmissionBlock"],[51,8,52,6,"foundOmissionBlock"],[51,26,52,24],[51,29,52,27],[51,33,52,6],[52,0,53,5],[52,7,49,11],[52,13,53,11],[52,17,53,15,"str"],[52,20,53,18],[52,21,53,19,"substr"],[52,27,53,15],[52,28,53,26,"str"],[52,31,53,29],[52,32,53,30,"length"],[52,38,53,26],[52,41,53,39],[52,42,53,15],[52,48,53,46],[52,52,53,11],[52,54,53,52],[53,0,54,6,"blocks"],[53,8,54,6,"blocks"],[53,14,54,12],[53,15,54,13,"pop"],[53,18,54,6],[54,0,55,6,"blocks"],[54,8,55,6,"blocks"],[54,14,55,12],[54,15,55,13,"pop"],[54,18,55,6],[55,0,56,6,"foundOmissionBlock"],[55,8,56,6,"foundOmissionBlock"],[55,26,56,24],[55,29,56,27],[55,33,56,6],[56,0,57,5],[58,0,59,4],[58,11,59,9],[58,15,59,13,"i"],[58,16,59,14],[58,19,59,17],[58,20,59,4],[58,22,59,20,"i"],[58,23,59,21],[58,26,59,24,"blocks"],[58,32,59,30],[58,33,59,31,"length"],[58,39,59,4],[58,41,59,39],[58,43,59,41,"i"],[58,44,59,4],[58,46,59,44],[59,0,62,6],[59,12,62,10,"blocks"],[59,18,62,16],[59,19,62,17,"i"],[59,20,62,16],[59,21,62,10],[59,26,62,24],[59,28,62,10],[59,32,62,30,"i"],[59,33,62,31],[59,36,62,34],[59,37,62,10],[59,41,62,39,"i"],[59,42,62,40],[59,45,62,43,"blocks"],[59,51,62,49],[59,52,62,50,"length"],[59,58,62,43],[59,61,62,59],[59,62,62,6],[59,64,62,62],[60,0,63,8],[60,14,63,12,"foundOmissionBlock"],[60,32,63,8],[60,34,63,32],[61,0,64,10],[61,19,64,17],[61,24,64,10],[62,0,65,9],[64,0,67,8,"foundOmissionBlock"],[64,10,67,8,"foundOmissionBlock"],[64,28,67,26],[64,31,67,29],[64,35,67,8],[65,0,68,7],[65,9,62,6],[65,15,68,13],[65,19,68,17,"foundIPv4TransitionBlock"],[65,43,68,41],[65,47,68,45,"i"],[65,48,68,46],[65,53,68,51,"blocks"],[65,59,68,57],[65,60,68,58,"length"],[65,66,68,51],[65,69,68,67],[65,70,68,13],[65,72,68,70],[65,73,70,7],[65,74,68,13],[65,80,70,13],[65,84,70,17],[65,85,70,18,"ipv6Block"],[65,94,70,27],[65,95,70,28,"test"],[65,99,70,18],[65,100,70,33,"blocks"],[65,106,70,39],[65,107,70,40,"i"],[65,108,70,39],[65,109,70,18],[65,110,70,13],[65,112,70,45],[66,0,71,8],[66,17,71,15],[66,22,71,8],[67,0,72,7],[68,0,73,5],[70,0,75,4],[70,10,75,8,"foundOmissionBlock"],[70,28,75,4],[70,30,75,28],[71,0,76,6],[71,15,76,13,"blocks"],[71,21,76,19],[71,22,76,20,"length"],[71,28,76,13],[71,32,76,30],[71,33,76,6],[72,0,77,5],[74,0,79,4],[74,13,79,11,"blocks"],[74,19,79,17],[74,20,79,18,"length"],[74,26,79,11],[74,31,79,29,"expectedNumberOfBlocks"],[74,53,79,4],[75,0,80,3],[77,0,82,2],[77,11,82,9],[77,16,82,2],[78,0,83,1],[80,0,85,0,"module"],[80,2,85,0,"module"],[80,8,85,6],[80,9,85,7,"exports"],[80,16,85,0],[80,19,85,17,"exports"],[80,26,85,24],[80,27,85,25,"default"],[80,34,85,0]]},"type":"js/module"}]}